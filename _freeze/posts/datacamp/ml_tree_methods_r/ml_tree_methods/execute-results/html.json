{
  "hash": "7d10309c11dc102da801595125d1a8dd",
  "result": {
    "markdown": "---\ntitle: \"ML with tree based models in r\"\nauthor: \"Mburu\"\ndate: \"4/4/2020\"\noutput:\n  html_document:\n    toc: true\n    toc_depth: 2\n    toc_float:\n      collapsed: false\n      smooth_scroll: false\n    theme: united\n    highlight: pygments\n---\n\n\n\n\n## Build a classification tree\n\nLet's get started and build our first classification tree. A classification tree is a decision tree that performs a classification (vs regression) task. You will train a decision tree model to understand which loan applications are at higher risk of default using a subset of the German Credit Dataset. The response variable, called \"default\", indicates whether the loan went into a default or not, which means this is a binary classification problem (there are just two classes). You will use the rpart package to fit the decision tree and the rpart.plot package to visualize the tree.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the data\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(rpart)\nlibrary(rpart.plot)\ncredit <- fread(\"credit.csv\", stringsAsFactors = TRUE) \ncredit[, default := factor(default)]\ncreditsub <- credit[sample(1:nrow(credit), 522),]\nstr(creditsub)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'data.table' and 'data.frame':\t522 obs. of  17 variables:\n $ checking_balance    : Factor w/ 4 levels \"1 - 200 DM\",\"< 0 DM\",..: 2 4 4 4 4 1 1 2 4 1 ...\n $ months_loan_duration: int  12 21 24 24 18 48 36 18 18 24 ...\n $ credit_history      : Factor w/ 5 levels \"critical\",\"good\",..: 2 1 2 2 1 4 2 2 4 2 ...\n $ purpose             : Factor w/ 6 levels \"business\",\"car\",..: 4 2 5 2 2 4 4 5 1 2 ...\n $ amount              : int  684 3275 1552 9277 1028 6224 12612 1345 2169 1246 ...\n $ savings_balance     : Factor w/ 5 levels \"100 - 500 DM\",..: 3 3 3 5 3 3 1 3 3 3 ...\n $ employment_duration : Factor w/ 5 levels \"1 - 4 years\",..: 1 4 2 1 1 4 1 1 1 3 ...\n $ percent_of_income   : int  4 1 3 2 4 4 1 4 4 4 ...\n $ years_at_residence  : int  4 4 1 4 3 4 4 3 2 2 ...\n $ age                 : int  40 36 32 48 36 50 47 26 28 23 ...\n $ other_credit        : Factor w/ 3 levels \"bank\",\"none\",..: 2 2 1 2 2 2 2 1 2 3 ...\n $ housing             : Factor w/ 3 levels \"other\",\"own\",..: 3 2 2 1 2 1 1 2 2 2 ...\n $ existing_loans_count: int  1 1 1 1 2 1 1 1 1 1 ...\n $ job                 : Factor w/ 4 levels \"management\",\"skilled\",..: 4 1 2 2 2 2 2 2 2 4 ...\n $ dependents          : int  2 1 2 1 1 1 2 1 1 1 ...\n $ phone               : Factor w/ 2 levels \"no\",\"yes\": 1 2 1 2 1 1 2 1 2 1 ...\n $ default             : Factor w/ 2 levels \"no\",\"yes\": 2 1 1 1 1 2 2 2 2 2 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n:::\n\n```{.r .cell-code}\n# Create the model\ncredit_model <- rpart(formula = default ~ ., \n                      data = creditsub, \n                      method = \"class\")\n\n# Display the results\nrpart.plot(x = credit_model, yesno = 2, type = 0, extra = 0)\n```\n\n::: {.cell-output-display}\n![](ml_tree_methods_files/figure-html/unnamed-chunk-1-1.png){width=864}\n:::\n:::\n\n\n## Train/test split\n\nFor this exercise, you'll randomly split the German Credit Dataset into two pieces: a training set (80%) called credit_train and a test set (20%) that we will call credit_test. We'll use these two sets throughout the chapter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Total number of rows in the credit data frame\nn <- nrow(credit)\n\n# Number of rows for the training set (80% of the dataset)\nn_train <- round(.8 * n) \n\n# Create a vector of indices which is an 80% random sample\nset.seed(123)\ntrain_indices <- sample(1:n, n_train)\n\n# Subset the credit data frame to training indices only\ncredit_train <- credit[train_indices, ]  \n  \n# Exclude the training indices to create the test set\ncredit_test <- credit[-train_indices, ]  \n\n# Train the model (to predict 'default')\ncredit_model <- rpart(formula = default ~., \n                      data = credit_train, \n                      method = \"class\")\n\n# Look at the model output                      \nprint(credit_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nn= 800 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n  1) root 800 230 no (0.7125000 0.2875000)  \n    2) checking_balance=> 200 DM,unknown 365  48 no (0.8684932 0.1315068) *\n    3) checking_balance=1 - 200 DM,< 0 DM 435 182 no (0.5816092 0.4183908)  \n      6) months_loan_duration< 22.5 259  85 no (0.6718147 0.3281853)  \n       12) credit_history=critical,good,poor 235  68 no (0.7106383 0.2893617)  \n         24) months_loan_duration< 11.5 70  11 no (0.8428571 0.1571429) *\n         25) months_loan_duration>=11.5 165  57 no (0.6545455 0.3454545)  \n           50) amount>=1282 112  30 no (0.7321429 0.2678571) *\n           51) amount< 1282 53  26 yes (0.4905660 0.5094340)  \n            102) purpose=business,education,furniture/appliances 34  12 no (0.6470588 0.3529412) *\n            103) purpose=car,renovations 19   4 yes (0.2105263 0.7894737) *\n       13) credit_history=perfect,very good 24   7 yes (0.2916667 0.7083333) *\n      7) months_loan_duration>=22.5 176  79 yes (0.4488636 0.5511364)  \n       14) savings_balance=> 1000 DM,unknown 29   7 no (0.7586207 0.2413793) *\n       15) savings_balance=100 - 500 DM,500 - 1000 DM,< 100 DM 147  57 yes (0.3877551 0.6122449)  \n         30) months_loan_duration< 47.5 119  54 yes (0.4537815 0.5462185)  \n           60) amount>=2313.5 93  45 no (0.5161290 0.4838710)  \n            120) amount< 3026 19   5 no (0.7368421 0.2631579) *\n            121) amount>=3026 74  34 yes (0.4594595 0.5405405)  \n              242) percent_of_income< 2.5 38  15 no (0.6052632 0.3947368)  \n                484) purpose=business,car,education 23   6 no (0.7391304 0.2608696) *\n                485) purpose=car0,furniture/appliances,renovations 15   6 yes (0.4000000 0.6000000) *\n              243) percent_of_income>=2.5 36  11 yes (0.3055556 0.6944444) *\n           61) amount< 2313.5 26   6 yes (0.2307692 0.7692308) *\n         31) months_loan_duration>=47.5 28   3 yes (0.1071429 0.8928571) *\n```\n:::\n:::\n\n\n## Compute confusion matrix\n\nAs discussed in the previous video, there are a number of different metrics by which you can measure the performance of a classification model. In this exercise, we will evaluate the performance of the model using test set classification error. A confusion matrix is a convenient way to examine the per-class error rates for all classes at once. The confusionMatrix() function from the caret package prints both the confusion matrix and a number of other useful classification metrics such as \"Accuracy\" (fraction of correctly classified instances). The caret package has been loaded for you.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# Generate predicted classes using the model object\nclass_prediction <- predict(object = credit_model,  \n                        newdata = credit_test,   \n                        type = \"class\")  \n                            \n# Calculate the confusion matrix for the test set\n\nclass_prediction <- factor(class_prediction, levels = levels(credit_test$default) )\nconfusionMatrix(data = class_prediction,       \n                reference = credit_test$default, positive = \"yes\")  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  no yes\n       no  117  44\n       yes  13  26\n                                          \n               Accuracy : 0.715           \n                 95% CI : (0.6471, 0.7764)\n    No Information Rate : 0.65            \n    P-Value [Acc > NIR] : 0.03046         \n                                          \n                  Kappa : 0.3023          \n                                          \n Mcnemar's Test P-Value : 7.08e-05        \n                                          \n            Sensitivity : 0.3714          \n            Specificity : 0.9000          \n         Pos Pred Value : 0.6667          \n         Neg Pred Value : 0.7267          \n             Prevalence : 0.3500          \n         Detection Rate : 0.1300          \n   Detection Prevalence : 0.1950          \n      Balanced Accuracy : 0.6357          \n                                          \n       'Positive' Class : yes             \n                                          \n```\n:::\n:::\n\n\n## Compare models with a different splitting criterion\n\nTrain two models that use a different splitting criterion and use the validation set to choose a \"best\" model from this group. To do this you'll use the parms argument of the rpart() function. This argument takes a named list that contains values of different parameters you can use to change how the model is trained. Set the parameter split to control the splitting criterion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train a gini-based model\ncredit_model1 <- rpart(formula = default ~ ., \n                       data = credit_train, \n                       method = \"class\",\n                       parms = list(split = \"gini\"))\n\n# Train an information-based model\ncredit_model2 <- rpart(formula = default ~ ., \n                       data = credit_train, \n                       method = \"class\",\n                       parms = list(split = \"information\"))\n\n# Generate predictions on the validation set using the gini model\npred1 <- predict(object = credit_model1, \n             newdata = credit_test,\n             type = \"class\")    \n\n# Generate predictions on the validation set using the information model\npred2 <- predict(object = credit_model2, \n             newdata = credit_test,\n             type = \"class\") \n\ndt_preds <- predict(object = credit_model2, \n             newdata = credit_test,\n             type = \"prob\") \n\n# Compare classification error\nlibrary(Metrics)\nce(actual = credit_test$default, \n   predicted = pred1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.285\n```\n:::\n\n```{.r .cell-code}\nce(actual = credit_test$default, \n   predicted = pred2)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.285\n```\n:::\n:::\n\n\n## The response is final_grade (numeric: from 0 to 20, output target).\n\nAfter initial exploration, split the data into training, validation, and test sets. In this chapter, we will introduce the idea of a validation set, which can be used to select a \"best\" model from a set of competing models. In Chapter 1, we demonstrated a simple way to split the data into two pieces using the sample() function. In this exercise, we will take a slightly different approach to splitting the data that allows us to split the data into more than two parts (here, we want three: train, validation, test). We still use the sample() function, but instead of sampling the indices themselves, we will assign each row to either the training, validation or test sets according to a probability distribution. The dataset grade is already in your workspace.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade <- read.csv(\"grade.csv\")\n# Look at the data\nstr(grade)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t395 obs. of  8 variables:\n $ final_grade: num  3 3 5 7.5 5 7.5 5.5 3 9.5 7.5 ...\n $ age        : int  18 17 15 15 16 16 16 17 15 15 ...\n $ address    : chr  \"U\" \"U\" \"U\" \"U\" ...\n $ studytime  : int  2 2 2 3 2 2 2 2 2 2 ...\n $ schoolsup  : chr  \"yes\" \"no\" \"yes\" \"no\" ...\n $ famsup     : chr  \"no\" \"yes\" \"no\" \"yes\" ...\n $ paid       : chr  \"no\" \"no\" \"yes\" \"yes\" ...\n $ absences   : int  6 4 10 2 4 10 0 6 0 0 ...\n```\n:::\n\n```{.r .cell-code}\n# Set seed and create assignment\nset.seed(1)\nassignment <- sample(1:3, size = nrow(grade), prob = c(.7, .15, .15), replace = TRUE)\n\n# Create a train, validation and tests from the original data frame \ngrade_train <- grade[assignment == 1, ]    # subset grade to training indices only\ngrade_valid <- grade[assignment == 2, ]  # subset grade to validation indices only\ngrade_test <- grade[assignment == 3, ]   # subset grade to test indices only\n```\n:::\n\n\n## Train a regression tree model\n\nIn this exercise, we will use the grade_train dataset to fit a regression tree using rpart() and visualize it using rpart.plot(). A regression tree plot looks identical to a classification tree plot, with the exception that there will be numeric values in the leaf nodes instead of predicted classes. This is very similar to what we did previously in Chapter 1. When fitting a classification tree, we use method = \"class\", however, when fitting a regression tree, we need to set method = \"anova\". By default, the rpart() function will make an intelligent guess as to what the method value should be based on the data type of your response column, but it's recommened that you explictly set the method for reproducibility reasons (since the auto-guesser may change in the future). The grade_train training set is loaded into the workspace.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train the model\ngrade_model <- rpart(formula = final_grade ~ ., \n                     data = grade_train, \n                     method = \"anova\")\n\n# Look at the model output                      \nprint(grade_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nn= 282 \n\nnode), split, n, deviance, yval\n      * denotes terminal node\n\n 1) root 282 1519.49700 5.271277  \n   2) absences< 0.5 82  884.18600 4.323171  \n     4) paid=no 50  565.50500 3.430000  \n       8) famsup=yes 22  226.36360 2.272727 *\n       9) famsup=no 28  286.52680 4.339286 *\n     5) paid=yes 32  216.46880 5.718750  \n      10) age>=17.5 10   82.90000 4.100000 *\n      11) age< 17.5 22   95.45455 6.454545 *\n   3) absences>=0.5 200  531.38000 5.660000  \n     6) absences>=13.5 42  111.61900 4.904762 *\n     7) absences< 13.5 158  389.43670 5.860759  \n      14) schoolsup=yes 23   50.21739 4.847826 *\n      15) schoolsup=no 135  311.60000 6.033333  \n        30) studytime< 3.5 127  276.30710 5.940945 *\n        31) studytime>=3.5 8   17.00000 7.500000 *\n```\n:::\n\n```{.r .cell-code}\n# Plot the tree model\nrpart.plot(x = grade_model, yesno = 2, type = 0, extra = 0)\n```\n\n::: {.cell-output-display}\n![](ml_tree_methods_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\n## Evaluate a regression tree model\n\nPredict the final grade for all students in the test set. The grade is on a 0-20 scale. Evaluate the model based on test set RMSE (Root Mean Squared Error). RMSE tells us approximately how far away our predictions are from the true values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate predictions on a test set\npred <- predict(object = grade_model,   # model object \n                newdata = grade_test)  # test dataset\n\n# Compute the RMSE\nrmse(actual = grade_test$final_grade, \n     predicted = pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.278249\n```\n:::\n:::\n\n\n## Tuning the model\n\nTune (or \"trim\") the model using the prune() function by finding the best \"CP\" value (CP stands for \"Complexity Parameter\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the \"CP Table\"\nplotcp(grade_model)\n```\n\n::: {.cell-output-display}\n![](ml_tree_methods_files/figure-html/unnamed-chunk-8-1.png){width=768}\n:::\n\n```{.r .cell-code}\n# Print the \"CP Table\"\nprint(grade_model$cptable)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          CP nsplit rel error    xerror       xstd\n1 0.06839852      0 1.0000000 1.0066743 0.09169976\n2 0.06726713      1 0.9316015 1.0185398 0.08663026\n3 0.03462630      2 0.8643344 0.8923588 0.07351895\n4 0.02508343      3 0.8297080 0.9046335 0.08045100\n5 0.01995676      4 0.8046246 0.8920489 0.08153881\n6 0.01817661      5 0.7846679 0.9042142 0.08283114\n7 0.01203879      6 0.7664912 0.8833557 0.07945742\n8 0.01000000      7 0.7544525 0.8987112 0.08200148\n```\n:::\n\n```{.r .cell-code}\n# Retrieve optimal cp value based on cross-validated error\nopt_index <- which.min(grade_model$cptable[, \"xerror\"])\ncp_opt <- grade_model$cptable[opt_index, \"CP\"]\n\n# Prune the model (to optimized cp value)\ngrade_model_opt <- prune(tree = grade_model, \n                         cp = cp_opt)\n                          \n# Plot the optimized model\nrpart.plot(x = grade_model_opt, yesno = 2, type = 0, extra = 0)\n```\n\n::: {.cell-output-display}\n![](ml_tree_methods_files/figure-html/unnamed-chunk-8-2.png){width=768}\n:::\n:::\n\n\n## Generate a grid of hyperparameter values\n\nUse expand.grid() to generate a grid of maxdepth and minsplit values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Establish a list of possible values for minsplit and maxdepth\nminsplit <- seq(1, 4, 1)\nmaxdepth <- seq(1, 6, 1)\n\n# Create a data frame containing all combinations \nhyper_grid <- expand.grid(minsplit = minsplit, maxdepth = maxdepth)\n\n# Check out the grid\nhead(hyper_grid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  minsplit maxdepth\n1        1        1\n2        2        1\n3        3        1\n4        4        1\n5        1        2\n6        2        2\n```\n:::\n\n```{.r .cell-code}\n# Print the number of grid combinations\nnrow(hyper_grid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24\n```\n:::\n:::\n\n\n## Generate a grid of models\n\nIn this exercise, we will write a simple loop to train a \"grid\" of models and store the models in a list called grade_models. R users who are familiar with the apply functions in R could think about how this loop could be easily converted into a function applied to a list as an extra-credit thought experiment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of potential models in the grid\nnum_models <- nrow(hyper_grid)\n\n# Create an empty list to store models\ngrade_models <- list()\n\n# Write a loop over the rows of hyper_grid to train the grid of models\nfor (i in 1:num_models) {\n\n    # Get minsplit, maxdepth values at row i\n    minsplit <- hyper_grid$minsplit[i]\n    maxdepth <- hyper_grid$maxdepth[i]\n\n    # Train a model and store in the list\n    grade_models[[i]] <- rpart(formula = final_grade ~ ., \n                               data = grade_train, \n                               method = \"anova\",\n                               minsplit = minsplit,\n                               maxdepth = maxdepth)\n}\n```\n:::\n\n\nEvaluate the grid Earlier in the chapter we split the dataset into three parts: training, validation and test.\n\nA dataset that is not used in training is sometimes referred to as a \"holdout\" set. A holdout set is used to estimate model performance and although both validation and test sets are considered to be holdout data, there is a key difference:\n\nJust like a test set, a validation set is used to evaluate the performance of a model. The difference is that a validation set is specifically used to compare the performance of a group of models with the goal of choosing a \"best model\" from the group. All the models in a group are evaluated on the same validation set and the model with the best performance is considered to be the winner. Once you have the best model, a final estimate of performance is computed on the test set. A test set should only ever be used to estimate model performance and should not be used in model selection. Typically if you use a test set more than once, you are probably doing something wrong.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of potential models in the grid\nnum_models <- length(grade_models)\n\n# Create an empty vector to store RMSE values\nrmse_values <- c()\n\n# Write a loop over the models to compute validation RMSE\nfor (i in 1:num_models) {\n\n    # Retrieve the i^th model from the list\n    model <- grade_models[[i]]\n    \n    # Generate predictions on grade_valid \n    pred <- predict(object = model,\n                    newdata = grade_valid)\n    \n    # Compute validation RMSE and add to the \n    rmse_values[i] <- rmse(actual = grade_valid$final_grade, \n                           predicted = pred)\n}\n\n# Identify the model with smallest validation set RMSE\nbest_model <- grade_models[[which.min(rmse_values)]]\n\n# Print the model paramters of the best model\nbest_model$control\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$minsplit\n[1] 2\n\n$minbucket\n[1] 1\n\n$cp\n[1] 0.01\n\n$maxcompete\n[1] 4\n\n$maxsurrogate\n[1] 5\n\n$usesurrogate\n[1] 2\n\n$surrogatestyle\n[1] 0\n\n$maxdepth\n[1] 1\n\n$xval\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n# Compute test set RMSE on best_model\npred <- predict(object = best_model,\n                newdata = grade_test)\nrmse(actual = grade_test$final_grade, \n     predicted = pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.124109\n```\n:::\n:::\n\n\n## Train a bagged tree model\n\nLet's start by training a bagged tree model. You'll be using the bagging() function from the ipred package. The number of bagged trees can be specified using the nbagg parameter, but here we will use the default (25). If we want to estimate the model's accuracy using the \"out-of-bag\" (OOB) samples, we can set the the coob parameter to TRUE. The OOB samples are the training obsevations that were not selected into the bootstrapped sample (used in training). Since these observations were not used in training, we can use them instead to evaluate the accuracy of the model (done automatically inside the bagging() function).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ipred)\n# Bagging is a randomized model, so let's set a seed (123) for reproducibility\nset.seed(123)\n\n# Train a bagged model\ncredit_model <- bagging(formula = default ~ ., \n                        data = credit_train,\n                        coob = TRUE)\n\n# Print the model\nprint(credit_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nBagging classification trees with 25 bootstrap replications \n\nCall: bagging.data.frame(formula = default ~ ., data = credit_train, \n    coob = TRUE)\n\nOut-of-bag estimate of misclassification error:  0.2537 \n```\n:::\n:::\n\n\n## Prediction and confusion matrix\n\nAs you saw in the video, a confusion matrix is a very useful tool for examining all possible outcomes of your predictions (true positive, true negative, false positive, false negative). In this exercise, you will predict those who will default using bagged trees. You will also create the confusion matrix using the confusionMatrix() function from the caret package. It's always good to take a look at the output using the print() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate predicted classes using the model object\nclass_prediction <- predict(object = credit_model,    \n                            newdata = credit_test,  \n                            type = \"class\")  # return classification labels\n\n# Print the predicted classes\nprint(class_prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] no  no  no  no  yes no  no  no  no  no  no  no  no  yes no  no  no  no \n [19] no  no  yes no  no  no  no  no  yes no  no  no  no  no  no  no  no  no \n [37] yes yes no  yes no  yes no  no  no  no  no  no  no  yes no  yes no  yes\n [55] yes no  yes no  yes no  no  yes no  no  yes yes no  yes no  no  no  yes\n [73] yes no  no  no  no  no  no  yes no  no  no  no  yes no  no  yes no  no \n [91] no  no  no  yes yes no  no  no  no  no  no  yes no  no  yes no  no  no \n[109] no  no  no  no  no  no  no  no  no  no  no  no  yes no  yes no  no  yes\n[127] yes no  yes no  no  no  no  no  yes no  yes yes no  no  no  no  yes no \n[145] no  no  yes no  no  no  no  yes no  no  no  no  no  no  no  yes no  no \n[163] yes no  yes no  no  no  no  no  no  no  no  no  no  no  no  no  no  no \n[181] no  no  yes yes yes no  yes no  no  no  no  no  yes no  no  no  yes no \n[199] no  yes\nLevels: no yes\n```\n:::\n\n```{.r .cell-code}\n# Calculate the confusion matrix for the test set\nconfusionMatrix(data =  class_prediction,     \n                reference =  credit_test$default, positive = \"yes\")  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  no yes\n       no  119  33\n       yes  11  37\n                                          \n               Accuracy : 0.78            \n                 95% CI : (0.7161, 0.8354)\n    No Information Rate : 0.65            \n    P-Value [Acc > NIR] : 4.557e-05       \n                                          \n                  Kappa : 0.4787          \n                                          \n Mcnemar's Test P-Value : 0.001546        \n                                          \n            Sensitivity : 0.5286          \n            Specificity : 0.9154          \n         Pos Pred Value : 0.7708          \n         Neg Pred Value : 0.7829          \n             Prevalence : 0.3500          \n         Detection Rate : 0.1850          \n   Detection Prevalence : 0.2400          \n      Balanced Accuracy : 0.7220          \n                                          \n       'Positive' Class : yes             \n                                          \n```\n:::\n:::\n\n\n## Predict on a test set and compute AUC\n\nIn binary classification problems, we can predict numeric values instead of class labels. In fact, class labels are created only after you use the model to predict a raw, numeric, predicted value for a test point. The predicted label is generated by applying a threshold to the predicted value, such that all tests points with predicted value greater than that threshold get a predicted label of \"1\" and, points below that threshold get a predicted label of \"0\". In this exercise, generate predicted values (rather than class labels) on the test set and evaluate performance based on AUC (Area Under the ROC Curve). The AUC is a common metric for evaluating the discriminatory ability of a binary classification model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate predictions on the test set\npred <- predict(object = credit_model,\n                newdata = credit_test,\n                type = \"prob\")\n\n# `pred` is a matrix\nclass(pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"matrix\" \"array\" \n```\n:::\n\n```{.r .cell-code}\n# Look at the pred format\nhead(pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       no  yes\n[1,] 0.92 0.08\n[2,] 0.92 0.08\n[3,] 1.00 0.00\n[4,] 1.00 0.00\n[5,] 0.16 0.84\n[6,] 0.84 0.16\n```\n:::\n\n```{.r .cell-code}\n# Compute the AUC (`actual` must be a binary (or 1/0 numeric) vector)\ncredit_ipred_model_test_auc <- auc(actual = ifelse(credit_test$default == \"yes\", 1, 0), \n    predicted = pred[,\"yes\"])  \n\ncredit_ipred_model_test_auc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8084066\n```\n:::\n:::\n\n\n## Cross-validate a bagged tree model in caret\n\nUse caret::train() with the \"treebag\" method to train a model and evaluate the model using cross-validated AUC. The caret package allows the user to easily cross-validate any model across any relevant performance metric. In this case, we will use 5-fold cross validation and evaluate cross-validated AUC (Area Under the ROC Curve).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify the training configuration\nctrl_bag <- trainControl(method = \"cv\",     # Cross-validation\n                     number = 5,      # 5 folds\n                     classProbs = TRUE,                  # For AUC\n                     summaryFunction = twoClassSummary)  # For AUC\n\n# Cross validate the credit model using \"treebag\" method; \n# Track AUC (Area under the ROC curve)\nset.seed(1)  # for reproducibility\ncredit_caret_model <- train(default ~ .,\n                            data = credit_train, \n                            method = \"treebag\",\n                            metric = \"ROC\",\n                            trControl = ctrl_bag)\n\n# Look at the model object\nprint(credit_caret_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBagged CART \n\n800 samples\n 16 predictor\n  2 classes: 'no', 'yes' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 640, 640, 640, 640, 640 \nResampling results:\n\n  ROC       Sens       Spec     \n  0.744508  0.8736842  0.4173913\n```\n:::\n\n```{.r .cell-code}\n# Inspect the contents of the model list \nnames(credit_caret_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"method\"       \"modelInfo\"    \"modelType\"    \"results\"      \"pred\"        \n [6] \"bestTune\"     \"call\"         \"dots\"         \"metric\"       \"control\"     \n[11] \"finalModel\"   \"preProcess\"   \"trainingData\" \"ptype\"        \"resample\"    \n[16] \"resampledCM\"  \"perfNames\"    \"maximize\"     \"yLimits\"      \"times\"       \n[21] \"levels\"       \"terms\"        \"coefnames\"    \"contrasts\"    \"xlevels\"     \n```\n:::\n\n```{.r .cell-code}\n# Print the CV AUC\ncredit_caret_model$results[,\"ROC\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.744508\n```\n:::\n:::\n\n\n## Generate predictions from the caret model\n\nGenerate predictions on a test set for the caret model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate predictions on the test set\nbag_preds <- predict(object = credit_caret_model, \n                newdata = credit_test,\n                type = \"prob\")\n\n# Compute the AUC (`actual` must be a binary (or 1/0 numeric) vector)\ncredit_caret_model_test_auc <- auc(actual = ifelse(credit_test$default == \"yes\", 1, 0), \n                    predicted = pred[,\"yes\"])\n\ncredit_caret_model_test_auc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8084066\n```\n:::\n:::\n\n\n## Compare test set performance to CV performance\n\nIn this excercise, you will print test set AUC estimates that you computed in previous exercises. These two methods use the same code underneath, so the estimates should be very similar.\n\nThe credit_ipred_model_test_auc object stores the test set AUC from the model trained using the ipred::bagging() function. The credit_caret_model_test_auc object stores the test set AUC from the model trained using the caret::train() function with method = \"treebag\". Lastly, we will print the 5-fold cross-validated estimate of AUC that is stored within the credit_caret_model object. This number will be a more accurate estimate of the true model performance since we have averaged the performance over five models instead of just one.\n\nOn small datasets like this one, the difference between test set model performance estimates and cross-validated model performance estimates will tend to be more pronounced. When using small data, it's recommended to use cross-validated estimates of performance because they are more stable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print ipred::bagging test set AUC estimate\nprint(credit_ipred_model_test_auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8084066\n```\n:::\n\n```{.r .cell-code}\n# Print caret \"treebag\" test set AUC estimate\nprint(credit_caret_model_test_auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8084066\n```\n:::\n\n```{.r .cell-code}\n# Compare to caret 5-fold cross-validated AUC\ncredit_caret_model$results[, \"ROC\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.744508\n```\n:::\n:::\n\n\n## Train a Random Forest model\n\nHere you will use the randomForest() function from the randomForest package to train a Random Forest classifier to predict loan default.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(randomForest)\n# Train a Random Forest\nset.seed(1)  # for reproducibility\ncredit_model <- randomForest(formula = default ~ ., \n                             data = credit_train)\n                             \n# Print the model output                             \nprint(credit_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\n randomForest(formula = default ~ ., data = credit_train) \n               Type of random forest: classification\n                     Number of trees: 500\nNo. of variables tried at each split: 4\n\n        OOB estimate of  error rate: 24.12%\nConfusion matrix:\n     no yes class.error\nno  521  49  0.08596491\nyes 144  86  0.62608696\n```\n:::\n:::\n\n\n## Evaluate out-of-bag error\n\nHere you will plot the OOB error as a function of the number of trees trained, and extract the final OOB error of the Random Forest model from the trained model object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Grab OOB error matrix & take a look\nerr <- credit_model$err.rate\nhead(err)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           OOB        no       yes\n[1,] 0.3310105 0.2400000 0.5402299\n[2,] 0.3519313 0.2283951 0.6338028\n[3,] 0.3164129 0.1912833 0.6067416\n[4,] 0.3130564 0.1886792 0.6142132\n[5,] 0.3039890 0.1776062 0.6172249\n[6,] 0.2957560 0.1713222 0.6036866\n```\n:::\n\n```{.r .cell-code}\n# Look at final OOB error rate (last row in err matrix)\noob_err <- err[nrow(err), \"OOB\"]\nprint(oob_err)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    OOB \n0.24125 \n```\n:::\n\n```{.r .cell-code}\n# Plot the model trained in the previous exercise\nplot(credit_model)\n\n# Add a legend since it doesn't have one by default\nlegend(x = \"right\", \n       legend = colnames(err),\n       fill = 1:ncol(err))\n```\n\n::: {.cell-output-display}\n![](ml_tree_methods_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## Evaluate model performance on a test set\n\nUse the caret::confusionMatrix() function to compute test set accuracy and generate a confusion matrix. Compare the test set accuracy to the OOB accuracy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate predicted classes using the model object\nclass_prediction <- predict(object = credit_model,   # model object \n                            newdata = credit_test,  # test dataset\n                            type = \"class\") # return classification labels\n                            \n# Calculate the confusion matrix for the test set\ncm <- confusionMatrix(data = class_prediction,       # predicted classes\n                      reference = credit_test$default, positive = \"yes\")  # actual classes\nprint(cm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  no yes\n       no  121  39\n       yes   9  31\n                                          \n               Accuracy : 0.76            \n                 95% CI : (0.6947, 0.8174)\n    No Information Rate : 0.65            \n    P-Value [Acc > NIR] : 0.0005292       \n                                          \n                  Kappa : 0.4146          \n                                          \n Mcnemar's Test P-Value : 2.842e-05       \n                                          \n            Sensitivity : 0.4429          \n            Specificity : 0.9308          \n         Pos Pred Value : 0.7750          \n         Neg Pred Value : 0.7562          \n             Prevalence : 0.3500          \n         Detection Rate : 0.1550          \n   Detection Prevalence : 0.2000          \n      Balanced Accuracy : 0.6868          \n                                          \n       'Positive' Class : yes             \n                                          \n```\n:::\n\n```{.r .cell-code}\n# Compare test set accuracy to OOB accuracy\npaste0(\"Test Accuracy: \", cm$overall[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Test Accuracy: 0.76\"\n```\n:::\n\n```{.r .cell-code}\npaste0(\"OOB Accuracy: \", 1 - oob_err)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"OOB Accuracy: 0.75875\"\n```\n:::\n:::\n\n\n## Advantage of OOB error\n\nWhat is the main advantage of using OOB error instead of validation or test error? - If you evaluate your model using OOB error, then you don't need to create a separate test set\n\n## Evaluate test set AUC\n\nIn Chapter 3, we learned about the AUC metric for evaluating binary classification models. In this exercise, you will compute test set AUC for the Random Forest model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate predictions on the test set\npred <- predict(object = credit_model,\n            newdata = credit_test,\n            type = \"prob\")\n\n# `pred` is a matrix\nclass(pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"matrix\" \"array\"  \"votes\" \n```\n:::\n\n```{.r .cell-code}\n# Look at the pred format\nhead(pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     no   yes\n1 0.910 0.090\n2 0.892 0.108\n3 0.992 0.008\n4 0.952 0.048\n5 0.224 0.776\n6 0.846 0.154\n```\n:::\n\n```{.r .cell-code}\n# Compute the AUC (`actual` must be a binary 1/0 numeric vector)\nauc(actual = ifelse(credit_test$default == \"yes\", 1, 0), \n    predicted = pred[,\"yes\"])                    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8175824\n```\n:::\n:::\n\n\n## Tuning a Random Forest via mtry\n\nIn this exercise, you will use the randomForest::tuneRF() to tune mtry (by training several models). This function is a specific utility to tune the mtry parameter based on OOB error, which is helpful when you want a quick & easy way to tune your model. A more generic way of tuning Random Forest parameters will be presented in the following exercise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Execute the tuning process\nset.seed(1)              \nres <- tuneRF(x = subset(credit_train, select = -default),\n              y = credit_train$default,\n              ntreeTry = 500)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmtry = 4  OOB error = 24.12% \nSearching left ...\nmtry = 2 \tOOB error = 24.5% \n-0.01554404 0.05 \nSearching right ...\nmtry = 8 \tOOB error = 23.87% \n0.01036269 0.05 \n```\n:::\n\n::: {.cell-output-display}\n![](ml_tree_methods_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Look at results\nprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mtry OOBError\n2.OOB    2  0.24500\n4.OOB    4  0.24125\n8.OOB    8  0.23875\n```\n:::\n\n```{.r .cell-code}\n# Find the mtry value that minimizes OOB Error\nmtry_opt <- res[,\"mtry\"][which.min(res[,\"OOBError\"])]\nprint(mtry_opt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8.OOB \n    8 \n```\n:::\n\n```{.r .cell-code}\n# If you just want to return the best RF model (rather than results)\n# you can set `doBest = TRUE` in `tuneRF()` to return the best RF model\n# instead of a set performance matrix.\n```\n:::\n\n\n## Tuning a Random Forest via tree depth\n\nIn Chapter 2, we created a manual grid of hyperparameters using the expand.grid() function and wrote code that trained and evaluated the models of the grid in a loop. In this exercise, you will create a grid of mtry, nodesize and sampsize values. In this example, we will identify the \"best model\" based on OOB error. The best model is defined as the model from our grid which minimizes OOB error. Keep in mind that there are other ways to select a best model from a grid, such as choosing the best model based on validation AUC. However, for this exercise, we will use the built-in OOB error calculations instead of using a separate validation set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Establish a list of possible values for mtry, nodesize and sampsize\nmtry <- seq(4, ncol(credit_train) * 0.8, 2)\nnodesize <- seq(3, 8, 2)\nsampsize <- nrow(credit_train) * c(0.7, 0.8)\n\n# Create a data frame containing all combinations \nhyper_grid <- expand.grid(mtry = mtry, nodesize = nodesize, sampsize = sampsize)\n\n# Create an empty vector to store OOB error values\noob_err <- c()\n\n# Write a loop over the rows of hyper_grid to train the grid of models\nfor (i in 1:nrow(hyper_grid)) {\n\n    # Train a Random Forest model\n    model <- randomForest(formula = default ~ ., \n                          data = credit_train,\n                          mtry = hyper_grid$mtry[i],\n                          nodesize = hyper_grid$nodesize[i],\n                          sampsize = hyper_grid$sampsize[i])\n                          \n    # Store OOB error for the model                      \n    oob_err[i] <- model$err.rate[nrow(model$err.rate), \"OOB\"]\n}\n\n# Identify optimal set of hyperparmeters based on OOB error\nopt_i <- which.min(oob_err)\nprint(hyper_grid[opt_i,])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   mtry nodesize sampsize\n17    6        3      640\n```\n:::\n:::\n\n\n## Bagged trees vs. boosted trees\n\nWhat is the main difference between bagged trees and boosted trees?\n\n-   Boosted trees improve the model fit by considering past fits and bagged trees do not\n\n## Train a GBM model\n\nHere you will use the gbm() function to train a GBM classifier to predict loan default. You will train a 10,000-tree GBM on the credit_train dataset, which is pre-loaded into your workspace. Using such a large number of trees (10,000) is probably not optimal for a GBM model, but we will build more trees than we need and then select the optimal number of trees based on early performance-based stopping. The best GBM model will likely contain fewer trees than we started with. For binary classification, gbm() requires the response to be encoded as 0/1 (numeric), so we will have to convert from a \"no/yes\" factor to a 0/1 numeric response column.\n\nAlso, the the gbm() function requires the user to specify a distribution argument. For a binary classification problem, you should set distribution = \"bernoulli\". The Bernoulli distribution models a binary response.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gbm)\n# Convert \"yes\" to 1, \"no\" to 0\ncredit_train$default <- ifelse(as.character(credit_train$default) == \"yes\", 1, 0) \n\n# Train a 10000-tree GBM model\nset.seed(1)\ncredit_model <- gbm(formula = default ~ ., \n                    distribution = \"bernoulli\", \n                    data = credit_train,\n                    n.trees =  10000)\n                    \n# Print the model object                    \nprint(credit_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngbm(formula = default ~ ., distribution = \"bernoulli\", data = credit_train, \n    n.trees = 10000)\nA gradient boosted model with bernoulli loss function.\n10000 iterations were performed.\nThere were 16 predictors of which 16 had non-zero influence.\n```\n:::\n\n```{.r .cell-code}\n# summary() prints variable importance\nsummary(credit_model)\n```\n\n::: {.cell-output-display}\n![](ml_tree_methods_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                      var    rel.inf\namount                             amount 22.0897595\nage                                   age 17.9626175\ncredit_history             credit_history 10.6369658\npurpose                           purpose 10.2584546\nemployment_duration   employment_duration  8.8596192\nchecking_balance         checking_balance  6.4650840\nmonths_loan_duration months_loan_duration  5.8863990\nsavings_balance           savings_balance  3.7722735\njob                                   job  2.9418015\nother_credit                 other_credit  2.8613862\nhousing                           housing  2.5237773\nyears_at_residence     years_at_residence  2.3409228\npercent_of_income       percent_of_income  1.7687143\nphone                               phone  0.6373101\nexisting_loans_count existing_loans_count  0.5870700\ndependents                     dependents  0.4078447\n```\n:::\n:::\n\n\n## Prediction using a GBM model\n\nThe gbm package uses a predict() function to generate predictions from a model, similar to many other machine learning packages in R. When you see a function like predict() that works on many different types of input (a GBM model, a RF model, a GLM model, etc), that indicates that predict() is an \"alias\" for a GBM-specific version of that function. The GBM specific version of that function is predict.gbm(), but for convenience sake, we can just use predict() (either works).\n\nOne thing that's particular to the predict.gbm() however, is that you need to specify the number of trees used in the prediction. There is no default, so you have to specify this manually. For now, we can use the same number of trees that we specified when training the model, which is 10,000 (though this may not be the optimal number to use).\n\nAnother argument that you can specify is type, which is only relevant to Bernoulli and Poisson distributed outcomes. When using Bernoulli loss, the returned value is on the log odds scale by default and for Poisson, it's on the log scale. If instead you specify type = \"response\", then gbm converts the predicted values back to the same scale as the outcome. This will convert the predicted values into probabilities for Bernoulli and expected counts for Poisson.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Since we converted the training response col, let's also convert the test response col\ncredit_test$default <- ifelse(credit_test$default == \"yes\", 1, 0) \n\n# Generate predictions on the test set\npreds1 <- predict(object = credit_model, \n                  newdata = credit_test,\n                  n.trees = 10000 )\n\n# Generate predictions on the test set (scale to response)\npreds2 <- predict(object = credit_model, \n                  newdata = credit_test,\n                  n.trees = 10000,\n                  type = \"response\")\n\n# Compare the range of the two sets of predictions\nrange(preds1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -6.004812  4.646991\n```\n:::\n\n```{.r .cell-code}\nrange(preds2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.002460783 0.990500685\n```\n:::\n:::\n\n\n## Evaluate test set AUC\n\nCompute test set AUC of the GBM model for the two sets of predictions. We will notice that they are the same value. That's because AUC is a rank-based metric, so changing the actual values does not change the value of the AUC.\n\nHowever, if we were to use a scale-aware metric like RMSE to evaluate performance, we would want to make sure we converted the predictions back to the original scale of the response.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate the test set AUCs using the two sets of preditions & compare\nauc(actual = credit_test$default, predicted = preds1)  #default\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7142857\n```\n:::\n\n```{.r .cell-code}\nauc(actual = credit_test$default, predicted = preds2)  #rescaled\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7142857\n```\n:::\n:::\n\n\n## Early stopping in GBMs\n\nUse the gbm.perf() function to estimate the optimal number of boosting iterations (aka n.trees) for a GBM model object using both OOB and CV error. When you set out to train a large number of trees in a GBM (such as 10,000) and you use a validation method to determine an earlier (smaller) number of trees, then that's called \"early stopping\". The term \"early stopping\" is not unique to GBMs, but can describe auto-tuning the number of iterations in an iterative learning algorithm.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Optimal ntree estimate based on OOB\nntree_opt_oob <- gbm.perf(object = credit_model, \n                          method = \"OOB\", \n                          oobag.curve = TRUE)\n```\n\n::: {.cell-output-display}\n![](ml_tree_methods_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ml_tree_methods_files/figure-html/unnamed-chunk-27-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Train a CV GBM model\nset.seed(1)\ncredit_model_cv <- gbm(formula = default ~ ., \n                       distribution = \"bernoulli\", \n                       data = credit_train,\n                       n.trees = 10000,\n                       cv.folds = 5)\n\n# Optimal ntree estimate based on CV\nntree_opt_cv <- gbm.perf(object = credit_model_cv , \n                         method = \"cv\")\n```\n\n::: {.cell-output-display}\n![](ml_tree_methods_files/figure-html/unnamed-chunk-27-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# Compare the estimates                         \nprint(paste0(\"Optimal n.trees (OOB Estimate): \", ntree_opt_oob))                         \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Optimal n.trees (OOB Estimate): 76\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste0(\"Optimal n.trees (CV Estimate): \", ntree_opt_cv))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Optimal n.trees (CV Estimate): 127\"\n```\n:::\n:::\n\n\n## OOB vs CV-based early stopping\n\nIn the previous exercise, we used OOB error and cross-validated error to estimate the optimal number of trees in the GBM. These are two different ways to estimate the optimal number of trees, so in this exercise we will compare the performance of the models on a test set. We can use the same model object to make both of these estimates since the predict.gbm() function allows you to use any subset of the total number of trees (in our case, the total number is 10,000).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate predictions on the test set using ntree_opt_oob number of trees\npreds1 <- predict(object = credit_model, \n                  newdata = credit_test,\n                  n.trees = ntree_opt_oob)\n                  \n# Generate predictions on the test set using ntree_opt_cv number of trees\ngbm_preds <- predict(object = credit_model, \n                  newdata = credit_test,\n                  n.trees = ntree_opt_cv)   \n\n# Generate the test set AUCs using the two sets of preditions & compare\nauc1 <- auc(actual = credit_test$default, predicted = preds1)  #OOB\nauc2 <- auc(actual = credit_test$default, predicted =gbm_preds)  #CV \n\n# Compare AUC \nprint(paste0(\"Test set AUC (OOB): \", auc1))                         \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Test set AUC (OOB): 0.802527472527472\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste0(\"Test set AUC (CV): \", auc2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Test set AUC (CV): 0.792527472527473\"\n```\n:::\n:::\n\n\n## Compare all models based on AUC\n\nIn this final exercise, we will perform a model comparison across all types of models that we've learned about so far: Decision Trees, Bagged Trees, Random Forest and Gradient Boosting Machine (GBM). The models were all trained on the same training set, credit_train, and predictions were made for the credit_test dataset.\n\nWe have pre-loaded four sets of test set predictions, generated using the models we trained in previous chapters (one for each model type). The numbers stored in the prediction vectors are the raw predicted values themselves -- not the predicted class labels. Using the raw predicted values, we can calculate test set AUC for each model and compare the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#credit_train$default <-  factor(credit_train$default, levels  = c(0, 1))\n#credit_test$default <-  factor(credit_test$default, levels = c(0, 1))\n\nmyFolds <- createFolds(credit_train$default, k = 5)\n# tuneGridRf <- data.frame(\n#   .mtry = c(2, 3, 7),\n#   .splitrule = \"variance\",\n#   .min.node.size = 5\n# )\n\nmyControl <- trainControl(\n  method = \"cv\",\n  number = 5,\n  summaryFunction = twoClassSummary,\n  classProbs = TRUE, # IMPORTANT!\n  verboseIter = FALSE,\n  index = myFolds\n)\n\ny =  factor(credit_train$default,levels = c(1,0),  labels = c(\"yes\", \"no\"))\nx <- credit_train %>% select(-default)\nmodel_rf <- train(x =  x ,\n                  y= y,\n                  method = \"ranger\",\n                  classification = TRUE,\n                  metric = \"ROC\",\n                  trControl = myControl)\n \nrf_preds <- predict(model_rf, newdata = credit_test, type = \"prob\")\n\nrf_preds <- rf_preds[, \"yes\"]\n\nmodel_bag <- train(x = x, \n                   y = y,\n                   method = \"treebag\",\n                   metric = \"ROC\",\n                   trControl = myControl)\n\n\nbag_preds <- predict(model_bag, newdata = credit_test, type = \"prob\")\n\nbag_preds  <-bag_preds[, \"yes\"]\n\n\nhyperparams_gbm <- expand.grid(n.trees = seq(100,500, by = 50), \n                           interaction.depth = 1:7, \n                           shrinkage = seq(0.1, 0.9, by = .1), \n                           n.minobsinnode = seq(10, 30, 10))\nmodel_gbm <- train(x = x,\n                   y = y,\n                   method = \"gbm\",\n                   #tuneGrid = hyperparams_gbm,\n                   metric = \"ROC\",\n                   trControl = myControl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.2650            -nan     0.1000    0.0039\n     2        1.2427            -nan     0.1000    0.0095\n     3        1.2226            -nan     0.1000    0.0072\n     4        1.2078            -nan     0.1000    0.0015\n     5        1.1963            -nan     0.1000    0.0018\n     6        1.1816            -nan     0.1000    0.0039\n     7        1.1712            -nan     0.1000    0.0007\n     8        1.1601            -nan     0.1000    0.0007\n     9        1.1506            -nan     0.1000   -0.0010\n    10        1.1402            -nan     0.1000    0.0044\n    20        1.0561            -nan     0.1000    0.0007\n    40        0.9714            -nan     0.1000   -0.0006\n    60        0.9192            -nan     0.1000   -0.0048\n    80        0.8788            -nan     0.1000   -0.0041\n   100        0.8515            -nan     0.1000   -0.0014\n   120        0.8191            -nan     0.1000   -0.0056\n   140        0.7927            -nan     0.1000   -0.0041\n   150        0.7834            -nan     0.1000   -0.0037\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.2528            -nan     0.1000    0.0081\n     2        1.2246            -nan     0.1000    0.0064\n     3        1.1934            -nan     0.1000    0.0106\n     4        1.1729            -nan     0.1000    0.0022\n     5        1.1475            -nan     0.1000    0.0070\n     6        1.1305            -nan     0.1000    0.0000\n     7        1.1180            -nan     0.1000    0.0005\n     8        1.0926            -nan     0.1000    0.0005\n     9        1.0726            -nan     0.1000    0.0045\n    10        1.0576            -nan     0.1000   -0.0013\n    20        0.9674            -nan     0.1000   -0.0046\n    40        0.8488            -nan     0.1000   -0.0153\n    60        0.7727            -nan     0.1000   -0.0039\n    80        0.6981            -nan     0.1000   -0.0045\n   100        0.6502            -nan     0.1000   -0.0015\n   120        0.6014            -nan     0.1000   -0.0036\n   140        0.5684            -nan     0.1000   -0.0033\n   150        0.5464            -nan     0.1000   -0.0009\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.2438            -nan     0.1000    0.0155\n     2        1.2147            -nan     0.1000    0.0054\n     3        1.1900            -nan     0.1000    0.0060\n     4        1.1626            -nan     0.1000    0.0052\n     5        1.1412            -nan     0.1000    0.0017\n     6        1.1199            -nan     0.1000    0.0026\n     7        1.0992            -nan     0.1000    0.0009\n     8        1.0813            -nan     0.1000   -0.0046\n     9        1.0672            -nan     0.1000   -0.0023\n    10        1.0506            -nan     0.1000   -0.0080\n    20        0.9000            -nan     0.1000   -0.0032\n    40        0.7530            -nan     0.1000   -0.0073\n    60        0.6553            -nan     0.1000   -0.0054\n    80        0.5664            -nan     0.1000   -0.0073\n   100        0.5062            -nan     0.1000   -0.0059\n   120        0.4603            -nan     0.1000   -0.0057\n   140        0.4111            -nan     0.1000   -0.0043\n   150        0.3856            -nan     0.1000   -0.0035\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.0493            -nan     0.1000    0.0012\n     2        1.0312            -nan     0.1000    0.0065\n     3        1.0190            -nan     0.1000   -0.0028\n     4        1.0054            -nan     0.1000    0.0000\n     5        0.9983            -nan     0.1000   -0.0054\n     6        0.9814            -nan     0.1000   -0.0030\n     7        0.9722            -nan     0.1000    0.0000\n     8        0.9649            -nan     0.1000    0.0024\n     9        0.9579            -nan     0.1000    0.0004\n    10        0.9509            -nan     0.1000    0.0011\n    20        0.9017            -nan     0.1000   -0.0067\n    40        0.8232            -nan     0.1000   -0.0027\n    60        0.7655            -nan     0.1000   -0.0019\n    80        0.7302            -nan     0.1000   -0.0026\n   100        0.6907            -nan     0.1000   -0.0018\n   120        0.6691            -nan     0.1000   -0.0074\n   140        0.6566            -nan     0.1000   -0.0030\n   150        0.6459            -nan     0.1000   -0.0042\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.0321            -nan     0.1000    0.0031\n     2        1.0123            -nan     0.1000   -0.0019\n     3        0.9904            -nan     0.1000    0.0021\n     4        0.9813            -nan     0.1000   -0.0088\n     5        0.9736            -nan     0.1000   -0.0005\n     6        0.9543            -nan     0.1000    0.0044\n     7        0.9453            -nan     0.1000   -0.0038\n     8        0.9327            -nan     0.1000   -0.0033\n     9        0.9221            -nan     0.1000   -0.0018\n    10        0.9059            -nan     0.1000    0.0043\n    20        0.8193            -nan     0.1000   -0.0042\n    40        0.6906            -nan     0.1000   -0.0047\n    60        0.6227            -nan     0.1000   -0.0049\n    80        0.5567            -nan     0.1000   -0.0028\n   100        0.5066            -nan     0.1000   -0.0055\n   120        0.4600            -nan     0.1000   -0.0059\n   140        0.4173            -nan     0.1000   -0.0066\n   150        0.4008            -nan     0.1000   -0.0024\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.0386            -nan     0.1000    0.0032\n     2        1.0199            -nan     0.1000    0.0012\n     3        1.0082            -nan     0.1000   -0.0025\n     4        0.9934            -nan     0.1000   -0.0032\n     5        0.9699            -nan     0.1000   -0.0042\n     6        0.9500            -nan     0.1000   -0.0011\n     7        0.9247            -nan     0.1000    0.0039\n     8        0.9062            -nan     0.1000   -0.0055\n     9        0.8931            -nan     0.1000   -0.0046\n    10        0.8790            -nan     0.1000   -0.0041\n    20        0.7603            -nan     0.1000   -0.0044\n    40        0.6094            -nan     0.1000   -0.0032\n    60        0.5139            -nan     0.1000   -0.0026\n    80        0.4287            -nan     0.1000   -0.0012\n   100        0.3686            -nan     0.1000   -0.0040\n   120        0.3319            -nan     0.1000   -0.0055\n   140        0.2831            -nan     0.1000   -0.0024\n   150        0.2612            -nan     0.1000   -0.0024\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.1727            -nan     0.1000    0.0048\n     2        1.1566            -nan     0.1000    0.0042\n     3        1.1399            -nan     0.1000    0.0027\n     4        1.1174            -nan     0.1000    0.0048\n     5        1.0990            -nan     0.1000    0.0023\n     6        1.0846            -nan     0.1000    0.0023\n     7        1.0754            -nan     0.1000    0.0018\n     8        1.0645            -nan     0.1000    0.0035\n     9        1.0550            -nan     0.1000   -0.0008\n    10        1.0466            -nan     0.1000   -0.0008\n    20        0.9777            -nan     0.1000    0.0019\n    40        0.8611            -nan     0.1000   -0.0011\n    60        0.7978            -nan     0.1000   -0.0013\n    80        0.7429            -nan     0.1000   -0.0040\n   100        0.7077            -nan     0.1000   -0.0046\n   120        0.6889            -nan     0.1000   -0.0027\n   140        0.6654            -nan     0.1000   -0.0016\n   150        0.6559            -nan     0.1000   -0.0011\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.1591            -nan     0.1000    0.0058\n     2        1.1253            -nan     0.1000    0.0114\n     3        1.0902            -nan     0.1000    0.0116\n     4        1.0662            -nan     0.1000    0.0025\n     5        1.0593            -nan     0.1000   -0.0112\n     6        1.0380            -nan     0.1000    0.0034\n     7        1.0167            -nan     0.1000    0.0040\n     8        0.9910            -nan     0.1000    0.0052\n     9        0.9677            -nan     0.1000    0.0079\n    10        0.9546            -nan     0.1000   -0.0062\n    20        0.8419            -nan     0.1000   -0.0025\n    40        0.6865            -nan     0.1000   -0.0037\n    60        0.6017            -nan     0.1000   -0.0013\n    80        0.5465            -nan     0.1000   -0.0042\n   100        0.4891            -nan     0.1000   -0.0037\n   120        0.4468            -nan     0.1000   -0.0030\n   140        0.4141            -nan     0.1000   -0.0066\n   150        0.3985            -nan     0.1000   -0.0030\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.1740            -nan     0.1000   -0.0038\n     2        1.1288            -nan     0.1000    0.0121\n     3        1.0920            -nan     0.1000    0.0046\n     4        1.0637            -nan     0.1000    0.0088\n     5        1.0287            -nan     0.1000    0.0107\n     6        1.0025            -nan     0.1000   -0.0025\n     7        0.9746            -nan     0.1000    0.0011\n     8        0.9501            -nan     0.1000    0.0005\n     9        0.9284            -nan     0.1000   -0.0074\n    10        0.9116            -nan     0.1000   -0.0016\n    20        0.7753            -nan     0.1000   -0.0005\n    40        0.6060            -nan     0.1000   -0.0030\n    60        0.4993            -nan     0.1000    0.0012\n    80        0.4251            -nan     0.1000   -0.0042\n   100        0.3696            -nan     0.1000   -0.0020\n   120        0.3210            -nan     0.1000   -0.0020\n   140        0.2723            -nan     0.1000   -0.0012\n   150        0.2511            -nan     0.1000   -0.0026\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.2101            -nan     0.1000   -0.0015\n     2        1.1790            -nan     0.1000    0.0183\n     3        1.1480            -nan     0.1000    0.0163\n     4        1.1148            -nan     0.1000    0.0101\n     5        1.0826            -nan     0.1000    0.0125\n     6        1.0723            -nan     0.1000    0.0024\n     7        1.0499            -nan     0.1000    0.0121\n     8        1.0395            -nan     0.1000   -0.0027\n     9        1.0187            -nan     0.1000    0.0074\n    10        1.0063            -nan     0.1000    0.0043\n    20        0.9174            -nan     0.1000   -0.0016\n    40        0.8156            -nan     0.1000   -0.0010\n    60        0.7405            -nan     0.1000   -0.0031\n    80        0.7003            -nan     0.1000   -0.0016\n   100        0.6655            -nan     0.1000   -0.0023\n   120        0.6434            -nan     0.1000   -0.0027\n   140        0.6147            -nan     0.1000   -0.0048\n   150        0.6067            -nan     0.1000   -0.0012\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.1551            -nan     0.1000    0.0184\n     2        1.1113            -nan     0.1000    0.0181\n     3        1.0712            -nan     0.1000    0.0178\n     4        1.0338            -nan     0.1000    0.0092\n     5        1.0134            -nan     0.1000    0.0058\n     6        0.9854            -nan     0.1000    0.0107\n     7        0.9625            -nan     0.1000    0.0084\n     8        0.9432            -nan     0.1000    0.0041\n     9        0.9335            -nan     0.1000   -0.0023\n    10        0.9221            -nan     0.1000   -0.0025\n    20        0.8041            -nan     0.1000   -0.0017\n    40        0.6691            -nan     0.1000   -0.0066\n    60        0.5943            -nan     0.1000   -0.0049\n    80        0.5265            -nan     0.1000   -0.0049\n   100        0.4683            -nan     0.1000   -0.0041\n   120        0.4215            -nan     0.1000   -0.0018\n   140        0.3862            -nan     0.1000   -0.0031\n   150        0.3698            -nan     0.1000   -0.0018\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.1719            -nan     0.1000    0.0194\n     2        1.1111            -nan     0.1000    0.0264\n     3        1.0633            -nan     0.1000    0.0174\n     4        1.0323            -nan     0.1000    0.0050\n     5        1.0085            -nan     0.1000    0.0025\n     6        0.9997            -nan     0.1000   -0.0087\n     7        0.9728            -nan     0.1000    0.0075\n     8        0.9311            -nan     0.1000    0.0128\n     9        0.9227            -nan     0.1000   -0.0048\n    10        0.9037            -nan     0.1000    0.0010\n    20        0.7400            -nan     0.1000    0.0013\n    40        0.5865            -nan     0.1000   -0.0055\n    60        0.4703            -nan     0.1000   -0.0030\n    80        0.3800            -nan     0.1000   -0.0036\n   100        0.3205            -nan     0.1000   -0.0015\n   120        0.2803            -nan     0.1000   -0.0023\n   140        0.2401            -nan     0.1000   -0.0015\n   150        0.2183            -nan     0.1000   -0.0013\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.1683            -nan     0.1000    0.0149\n     2        1.1484            -nan     0.1000    0.0054\n     3        1.1290            -nan     0.1000    0.0081\n     4        1.1046            -nan     0.1000    0.0100\n     5        1.0993            -nan     0.1000   -0.0032\n     6        1.0877            -nan     0.1000    0.0007\n     7        1.0761            -nan     0.1000    0.0006\n     8        1.0694            -nan     0.1000    0.0002\n     9        1.0624            -nan     0.1000   -0.0023\n    10        1.0458            -nan     0.1000   -0.0009\n    20        0.9643            -nan     0.1000   -0.0015\n    40        0.8710            -nan     0.1000   -0.0019\n    60        0.8263            -nan     0.1000   -0.0067\n    80        0.7926            -nan     0.1000   -0.0050\n   100        0.7772            -nan     0.1000   -0.0060\n   120        0.7532            -nan     0.1000   -0.0031\n   140        0.7267            -nan     0.1000   -0.0032\n   150        0.7225            -nan     0.1000   -0.0028\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.1726            -nan     0.1000    0.0081\n     2        1.1329            -nan     0.1000    0.0210\n     3        1.0909            -nan     0.1000    0.0075\n     4        1.0686            -nan     0.1000    0.0064\n     5        1.0454            -nan     0.1000    0.0060\n     6        1.0313            -nan     0.1000   -0.0003\n     7        1.0107            -nan     0.1000    0.0060\n     8        0.9922            -nan     0.1000    0.0039\n     9        0.9778            -nan     0.1000   -0.0013\n    10        0.9617            -nan     0.1000    0.0008\n    20        0.8664            -nan     0.1000   -0.0030\n    40        0.7598            -nan     0.1000   -0.0031\n    60        0.6822            -nan     0.1000   -0.0028\n    80        0.6271            -nan     0.1000    0.0005\n   100        0.5784            -nan     0.1000   -0.0030\n   120        0.5264            -nan     0.1000   -0.0046\n   140        0.4798            -nan     0.1000   -0.0042\n   150        0.4659            -nan     0.1000   -0.0067\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.1689            -nan     0.1000    0.0036\n     2        1.1327            -nan     0.1000    0.0121\n     3        1.0929            -nan     0.1000    0.0143\n     4        1.0462            -nan     0.1000    0.0100\n     5        1.0181            -nan     0.1000    0.0078\n     6        0.9997            -nan     0.1000    0.0011\n     7        0.9750            -nan     0.1000    0.0056\n     8        0.9586            -nan     0.1000   -0.0003\n     9        0.9303            -nan     0.1000    0.0071\n    10        0.9179            -nan     0.1000   -0.0073\n    20        0.8060            -nan     0.1000   -0.0029\n    40        0.6746            -nan     0.1000   -0.0055\n    60        0.5787            -nan     0.1000   -0.0073\n    80        0.4995            -nan     0.1000   -0.0056\n   100        0.4327            -nan     0.1000   -0.0024\n   120        0.3789            -nan     0.1000   -0.0030\n   140        0.3350            -nan     0.1000   -0.0035\n   150        0.3100            -nan     0.1000   -0.0036\n\nIter   TrainDeviance   ValidDeviance   StepSize   Improve\n     1        1.1819            -nan     0.1000    0.0092\n     2        1.1663            -nan     0.1000    0.0076\n     3        1.1517            -nan     0.1000    0.0061\n     4        1.1427            -nan     0.1000    0.0039\n     5        1.1339            -nan     0.1000    0.0044\n     6        1.1280            -nan     0.1000    0.0022\n     7        1.1230            -nan     0.1000    0.0019\n     8        1.1151            -nan     0.1000    0.0023\n     9        1.1083            -nan     0.1000    0.0030\n    10        1.0985            -nan     0.1000    0.0035\n    20        1.0537            -nan     0.1000    0.0010\n    40        1.0014            -nan     0.1000   -0.0008\n    50        0.9848            -nan     0.1000   -0.0002\n```\n:::\n\n```{.r .cell-code}\ngbm_preds <- predict(model_gbm, newdata = credit_test, type = \"prob\")\n\ngbm_preds  <- gbm_preds[, \"yes\"]\n\nmodel_dt <- train(x = x,\n                   y = y,\n                   method = \"rpart\",\n                   metric = \"ROC\",\n                   trControl = myControl)\n\n\ndt_preds <- predict(model_dt, newdata = credit_test, type = \"prob\")\ndt_preds  <- dt_preds[, \"yes\"]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate the test set AUCs using the two sets of predictions & compare\nactual <- credit_test$default\ndt_auc <- auc(actual = actual, predicted = dt_preds)\nbag_auc <- auc(actual = actual, predicted = bag_preds)\nrf_auc <- auc(actual = actual, predicted = rf_preds)\ngbm_auc <- auc(actual = actual, predicted = gbm_preds)\n# \n# # Print results\nsprintf(\"Decision Tree Test AUC: %.3f\", dt_auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Decision Tree Test AUC: 0.770\"\n```\n:::\n\n```{.r .cell-code}\nsprintf(\"Bagged Trees Test AUC: %.3f\", bag_auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Bagged Trees Test AUC: 0.803\"\n```\n:::\n\n```{.r .cell-code}\nsprintf(\"Random Forest Test AUC: %.3f\", rf_auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Random Forest Test AUC: 0.814\"\n```\n:::\n\n```{.r .cell-code}\nsprintf(\"GBM Test AUC: %.3f\", gbm_auc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"GBM Test AUC: 0.804\"\n```\n:::\n:::\n\n\n## Plot & compare ROC curves\n\nWe conclude this course by plotting the ROC curves for all the models (one from each chapter) on the same graph. The ROCR package provides the prediction() and performance() functions which generate the data required for plotting the ROC curve, given a set of predictions and actual (true) values.\n\nThe more \"up and to the left\" the ROC curve of a model is, the better the model. The AUC performance metric is literally the \"Area Under the ROC Curve\", so the greater the area under this curve, the higher the AUC, and the better-performing the model is.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ROCR)\n# List of predictions\npreds_list <- list(dt_preds, bag_preds, rf_preds, gbm_preds)\n\n# List of actual values (same for all)\nm <- length(preds_list)\n\nactuals_list <- rep(list(credit_test$default), m)\n\n# Plot the ROC curves\npred <- prediction(preds_list, actuals_list)\nrocs <- performance(pred, \"tpr\", \"fpr\")\nplot(rocs, col = as.list(1:m), main = \"Test Set ROC Curves\")\nlegend(x = \"bottomright\", \n       legend = c(\"Decision Tree\", \"Bagged Trees\", \"Random Forest\", \"GBM\"),\n       fill = 1:m)\n```\n\n::: {.cell-output-display}\n![](ml_tree_methods_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "ml_tree_methods_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}