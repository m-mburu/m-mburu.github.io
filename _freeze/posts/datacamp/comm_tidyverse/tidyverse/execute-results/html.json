{
  "hash": "640db0ce5250202f4902c8e8e8c52f96",
  "result": {
    "markdown": "---\ntitle: \"Communicating with Data in the Tidyverse\"\nauthor: \"Mburu\"\ndate: \"8/11/2021\"\noutput: github_document\n---\n\n\n\n\n\n## Join the two data sets together\nIn the video, you have learned that the inner_join() function of dplyr needs to be given a \"key\" on which two data frames are joined. Actually, multiple keys that need to match can be specified. In this first exercise, you are going to join two data sets by two keys. The data frames ilo_hourly_compensation and ilo_working_hours are already loaded for you and are available in your workspace.\n\nThis course touches on a lot of concepts you may have forgotten, so if you ever need a quick refresher, download the tidyverse Cheat Sheet and keep it handy!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(data.table)\nload(\"ilo_working_hours.RData\")\nload(\"ilo_hourly_compensation.RData\")\n# Join both data frames\nilo_data <- ilo_hourly_compensation %>%\n  inner_join(ilo_working_hours, by = c(\"country\", \"year\"))\n\n# Count the resulting rows\nilo_data  %>% \n    count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1   612\n```\n:::\n\n```{.r .cell-code}\n# Examine ilo_data\nilo_data %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  country   year   hourly_compensation working_hours\n  <chr>     <chr>                <dbl>         <dbl>\n1 Australia 1980.0                8.44          34.6\n2 Canada    1980.0                8.87          34.8\n3 Denmark   1980.0               10.8           31.9\n4 Finland   1980.0                8.61          35.6\n5 France    1980.0                8.90          35.4\n6 Italy     1980.0                8.09          35.7\n```\n:::\n:::\n\n\n\n## Change variable types\nFor displaying data in ggplot2 graphics, it is often helpful to convert all the variables to the right data type. Usually, categorical variables like country in this example should be converted to factors before plotting them. You can do so using as.factor(). In your data set, two columns are still of type \"character\" – use mutate() to turn them into factors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Turn year and country into a factor\nilo_data_corrected <- ilo_data %>%\n  mutate(year = as.factor(as.integer(as.numeric(year))),\n        country = as.factor(country))\n\n# See the results\nilo_data_corrected %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  country   year  hourly_compensation working_hours\n  <fct>     <fct>               <dbl>         <dbl>\n1 Australia 1980                 8.44          34.6\n2 Canada    1980                 8.87          34.8\n3 Denmark   1980                10.8           31.9\n4 Finland   1980                 8.61          35.6\n5 France    1980                 8.90          35.4\n6 Italy     1980                 8.09          35.7\n```\n:::\n:::\n\n\n## Filter the data for plotting\nUse the filter() function of dplyr to remove non-European countries. A vector called european_countries has been created that contains all European countries which should remain in the data set. Here, the %in% operator introduced in the video might come in handy. Note that only a subset of European countries for which enough data exist is retained. For instance, Poland is missing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nilo_data <- ilo_data %>%\n  mutate(year = as.integer(as.numeric(year)))\n\neuropean_countries <- c(\"Finland\", \"France\", \"Italy\", \"Norway\", \"Spain\", \"Sweden\", \n                        \"Switzerland\", \"United Kingdom\", \"Belgium\", \"Ireland\", \n                        \"Luxembourg\", \"Portugal\", \"Netherlands\", \"Germany\", \n                        \"Hungary\", \"Austria\", \"Czech Rep.\")\n\n\n# Only retain European countries\nilo_data <- ilo_data %>%\n  filter(country %in% european_countries)\n```\n:::\n\n\n\n## Some summary statistics\nUse dplyrs group_by() and summarize() to compute summary statistics for both years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Examine the structure of ilo_data\nstr(ilo_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [380 × 4] (S3: tbl_df/tbl/data.frame)\n $ country            : chr [1:380] \"Finland\" \"France\" \"Italy\" \"Norway\" ...\n $ year               : int [1:380] 1980 1980 1980 1980 1980 1980 1980 1980 1981 1981 ...\n $ hourly_compensation: num [1:380] 8.61 8.9 8.09 11.8 5.86 ...\n $ working_hours      : num [1:380] 35.6 35.4 35.7 30.4 36.8 ...\n```\n:::\n\n```{.r .cell-code}\n# Group and summarize the data\nilo_data %>%\n  group_by(year) %>%\n  summarise(mean_hourly_compensation = mean(hourly_compensation),\n            mean_working_hours = mean(working_hours)) %>% \n    head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n   year mean_hourly_compensation mean_working_hours\n  <int>                    <dbl>              <dbl>\n1  1980                     9.27               34.0\n2  1981                     8.69               33.6\n3  1982                     8.36               33.5\n4  1983                     7.81               33.9\n5  1984                     7.54               33.7\n6  1985                     7.79               33.7\n```\n:::\n:::\n\n\n\n## A basic scatter plot\nIn this exercise, you will create a very basic scatter plot with ggplot2. \nThis is mostly a repetition of stuff you've learnt in the prerequisites for \nthis course, so it should be easy for you.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for 2006\nplot_data <- ilo_data %>%\n  filter(year == 2006)\n  \n# Create the scatter plot\nggplot(plot_data) +\n  geom_point(aes(x = working_hours, y = hourly_compensation))\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Add labels to the plot\nAs mentioned in the video, you're going to enhance the plot from\nthe previous exercise by adding a title, a subtitle, and a caption \nto the plot as well as giving the axes meaningful names. You're going to \nuse the labs() function to do this – try using ?labs in the console to\nsee the available options.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the plot\nilo_plot <- ggplot(plot_data) +\n  geom_point(aes(x = working_hours, y = hourly_compensation)) +\n  # Add labels\n  labs(\n    x = \"Working hours per week\",\n    y = \"Hourly compensation\",\n    title = \"The more people work, the less compensation they seem to receive\",\n    subtitle = \"Working hours and hourly compensation in European countries, 2006\",\n    caption = \"Data source: ILO, 2017\"\n  )\n\nilo_plot\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## Apply a default theme\nAs you've learnt in the videos, ggplot2 comes with a set of predefined themes. Try out some of them!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a different theme\nilo_plot +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Change the appearance of titles\nBesides applying defined theme presets, you can tweak your plot even more by \naltering different style attributes of it. Hint: You can reuse and overwrite \nthe ilo_plot variable generated in the previous exercise – the current plot is \nalready shown in the window on the right.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nilo_plot <- ilo_plot +\n  theme_minimal() +\n  # Customize the \"minimal\" theme with another custom \"theme\" call\n  theme(\n    text = element_text(family = \"Bookman\"),\n    title = element_text(color = \"gray25\"),\n    plot.caption = element_text(color = \"gray30\"),\n    plot.subtitle = element_text(size = 12)\n  )\n\n# Render the plot object\nilo_plot\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Alter background color and add margins\nFurther customize the look of your plot with more arguments to the theme \nfunction call. You can continue working on your ilo_plot object created in \nthe last exercise.\n\n- Change the overall background color of your plot to \"gray95\".\n- This time, another function than element_text is needed – one for rectangular plot elements. Rewatch the video to know which.\n- Add margins to the plot: 5mm top and bottom, 10mm to the left and the right.\n- The margins need to be specified in the following order: top, right, bottom, and left.\n\n::: {.cell}\n\n```{.r .cell-code}\nilo_plot +\n  # \"theme\" calls can be stacked upon each other, so this is already the third call of \"theme\"\n  theme(\n    plot.background = element_rect(fill = \"gray95\"),\n    plot.margin = unit(c(5, 10, 5, 10), units = \"mm\")\n  )\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## Prepare the data set for the faceted plot\nYou're now going to prepare your data set for producing the faceted scatter plot in the next exercise, as mentioned in the video.\nFor this, the data set needs to contain only the years 1996 and 2006, because your plot will only have two facets. ilo_data has been pre-loaded for you.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter ilo_data to retain the years 1996 and 2006\nilo_datap <- ilo_data %>%\n  filter(year == 1996 | year == 2006)\n# Again, you save the plot object into a variable so you can save typing later on\nilo_plot <- ggplot(ilo_datap, aes(x = working_hours, y = hourly_compensation)) +\n  geom_point() +\n   labs(\n    x = \"Working hours per week\",\n    y = \"Hourly compensation\",\n    title = \"The more people work, the less compensation they seem to receive\",\n    subtitle = \"Working hours and hourly compensation in European countries, 2006\",\n    caption = \"Data source: ILO, 2017\"\n  ) +\n  # Add facets here\n  facet_grid(.~year)\n \nilo_plot\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## Define your own theme function\nIn the video you saw how a lot of typing can be saved by replacing code chunks with function calls. You saw how a function is usually defined, now you will apply this knowledge in order to make your previous two theme() calls reusable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define your own theme function below\ntheme_ilo <- function() {\n   theme_minimal() +\n  theme(\n    text = element_text(family = \"Bookman\", color = \"gray25\"),\n    plot.subtitle = element_text(size = 12),\n    plot.caption = element_text(color = \"gray30\"),\n    plot.background = element_rect(fill = \"gray95\"),\n    plot.margin = unit(c(5, 10, 5, 10), units = \"mm\")\n  )\n}\n```\n:::\n\n\n\n## Apply the new theme function to the plot\nOnce you have created your own theme_ilo() function, it is time to apply it to a plot object. In the video you saw that theme() calls can be chained. You're going to make use of this and add another theme() call to adjust some peculiarities of the faceted plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply your theme function (dont't forget to call it with parentheses!)\nilo_plot <- ilo_plot +\n  theme_ilo()\n\n# Examine ilo_plot\nilo_plot\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nilo_plot +\n  # Add another theme call\n  theme(\n    # Change the background fill and color\n    strip.background = element_rect(fill = \"gray60\", color = 'gray95'),\n    # Change the color of the text\n    strip.text = element_text(color = \"white\")\n  )\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n\n## A basic dot plot\nAs shown in the video, use only geom_path() to create the basic structure of the dot plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the dot plot\nggplot(ilo_datap, aes(working_hours, country))+\ngeom_path()\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Add arrows to the lines in the plot\nInstead of labeling years, use the arrow argument of the geom_path() call to show the direction of change. The arrows will point from 1996 to 2006, because that's how the data set is ordered. The arrow() function takes two arguments: The first is length, which can be specified with a unit() call, which you might remember from previous exercises. The second is type which defines how the arrow head will look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ilo_datap) +\n  geom_path(aes(x = working_hours, y = country),\n  # Add an arrow to each path\n  arrow = arrow(length = unit(1.5, \"mm\"), type = \"closed\"))\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## Add some labels to each country\nA nice thing that can be added to plots are annotations or labels, so readers see the value of each data point displayed in the plot panel. This often makes axes obsolete, an advantage you're going to use in the last exercise of this chapter. These labels are usually added with geom_text() or geom_label(). The latter adds a background to each label, which is not needed here.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ilo_datap) +\n  geom_path(aes(x = working_hours, y = country),\n            arrow = arrow(length = unit(1.5, \"mm\"), type = \"closed\")) +\n  # Add a geom_text() geometry\n  geom_text(\n          aes(x = working_hours,\n              y = country,\n              label = round(working_hours, 1))\n        )\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n## Reordering elements in the plot\nAs shown in the video, use mutate() and fct_reorder() to change the factor level ordering of a variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nilo_datap <- ilo_datap %>%\n    mutate(country = as.factor(country))\n\n\nlibrary(forcats)\n\n# Reorder country factor levels\nilo_datap <- ilo_datap %>%\n  # Arrange data frame\n  arrange(year) %>%\n  # Reorder countries by working hours in 2006\n  mutate(country = fct_reorder(country,\n                               working_hours,\n                               last))\n\n# Plot again\nggplot(ilo_datap) +\n  geom_path(aes(x = working_hours, y = country),\n            arrow = arrow(length = unit(1.5, \"mm\"), type = \"closed\")) +\n    geom_text(\n          aes(x = working_hours,\n              y = country,\n              label = round(working_hours, 1))\n          )\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## Correct ugly label positions\nThe labels still kind of overlap with the lines in the dot plot. Use a conditional hjust aesthetic in order to better place them, and change their appearance.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save plot into an object for reuse\nilo_dot_plot <- ggplot(ilo_datap) +\n  geom_path(aes(x = working_hours, y = country),\n            arrow = arrow(length = unit(1.5, \"mm\"), type = \"closed\")) +\n    # Specify the hjust aesthetic with a conditional value\n    geom_text(\n          aes(x = working_hours,\n              y = country,\n              label = round(working_hours, 1),\n              hjust = ifelse(year == \"2006\", 1.4, -0.4)\n            ),\n          # Change the appearance of the text\n          size = 3,\n          family = \"Bookman\",\n          color = \"gray25\"\n          )\n\nilo_dot_plot\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n## Change the viewport so labels don't overlap with plot border\nUse a function introduced in the previous video to change the viewport of the plotting area. Also apply your custom theme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reuse ilo_dot_plot\nilo_dot_plot <- ilo_dot_plot +\n  # Add labels to the plot\n  labs(\n    x = \"Working hours per week\",\n    y = \"Country\",\n    title = \"People work less in 2006 compared to 1996\",\n    subtitle = \"Working hours in European countries, development since 1996\",\n    caption = \"Data source: ILO, 2017\"\n  ) +\n  # Apply your theme\n  theme_ilo() +\n  # Change the viewport\n  coord_cartesian(xlim = c(25, 41))\n  \n# View the plot\nilo_dot_plot\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## Optimizing the plot for mobile devices\nThe x-axis title is already quite superfluous because you've added labels for both years. You'll now add country labels to the plot, so all of the axes can be removed.\n\nIn this exercise, you're going to encounter something that is probably new to you: New data sets can be given to single geometries like geom_text(), so these geometries don't use the data set given to the initial ggplot() call. In this exercise, you are going to need this because you only want to add one label to each arrow. If you were to use the original data set ilo_data, two labels would be added because there are two observations for each country in the data set, one for 1996 and one for 2006.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute temporary data set for optimal label placement\nmedian_working_hours <- ilo_datap %>%\n  group_by(country) %>%\n  summarize(median_working_hours_per_country = median(working_hours)) %>%\n  ungroup()\n\n# Have a look at the structure of this data set\nstr(median_working_hours)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [17 × 2] (S3: tbl_df/tbl/data.frame)\n $ country                         : Factor w/ 17 levels \"Netherlands\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ median_working_hours_per_country: num [1:17] 27 27.8 28.4 31 30.9 ...\n```\n:::\n\n```{.r .cell-code}\nilo_dot_plot +\n  # Add label for country\n  geom_text(data = median_working_hours,\n            aes(y = country,\n                x = median_working_hours_per_country,\n                label = country),\n            vjust = 2,\n            family = \"Bookman\",\n            color = \"gray25\") +\n  # Remove axes and grids\n  theme(\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    panel.grid = element_blank(),\n    # Also, let's reduce the font size of the subtitle\n    plot.subtitle = element_text(size = 9)\n  )\n```\n\n::: {.cell-output-display}\n![](tidyverse_files/figure-html/unnamed-chunk-19-1.png){width=864}\n:::\n:::\n",
    "supporting": [
      "tidyverse_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}